pipeline {
    agent any
    stages {
        stage('Build'){ 
            steps {
                sh "git checkout dev"
                sh 'cd devops_api && dotnet restore'
                sh 'cd devops_api && dotnet build'
                sh 'cd devops_api && dotnet publish -o site'
                sh 'cd devops_api/site && zip ../site.zip *'
                sh 'cd devops_api && zip deploymentpackage.zip site.zip aws-windows-deployment-manifest.json'
            }
        }
        stage('Deploy to EB - development'){
            steps{
                step([$class: 'AWSEBDeploymentBuilder',
                    credentialId: 'awsIAM',
                    awsRegion: 'ap-south-1',
                    maxAttempts: 30,
                    applicationName: 'MicroservicePOC',
                    environmentName: 'Microservicepoc-env',
                    rootObject: 'devops_api/deploymentpackage.zip',
                    versionLabelFormat: '${BUILD_NUMBER}-${BUILD_TAG}',
                    sleepTime: 90,
                    checkHealth: true
                ])
            }
        }   
        stage('Deploy to EB - production'){
            input{
              message 'Do you want to proceed ??'
            }
            steps{
                withAWS(region:'ap-south-1', credentials:'awsIAM') {
                    s3Download bucket: 'elasticbeanstalk-ap-south-1-176983216772', file:'devops_api/dev_builds/'
                }
                step([$class: 'AWSEBDeploymentBuilder',
                    credentialId: 'awsIAM',
                    awsRegion: 'ap-south-1',
                    maxAttempts: 30,
                    applicationName: 'MicroservicePOC',
                    environmentName: 'Microservicepoc-env',
                    rootObject: 'devops_api/dev_builds/null/MicroservicePOC-${BUILD_NUMBER}-${BUILD_TAG}.zip',
                    versionLabelFormat: '${BUILD_NUMBER}-${BUILD_TAG}-prod',
                    sleepTime: 90,
                    checkHealth: true
                ])
            }
        }
        stage("Commit changes back to production repo"){
            steps{
                // sh 'git checkout --track origin/dev'
                sh 'git checkout --track origin/master'
                sh 'git pull'
                sh 'git merge dev'
                withCredentials([usernamePassword(credentialsId: 'githubId', passwordVariable: 'GIT_PASSWORD', usernameVariable: 'GIT_USERNAME')]) {
                    sh('git push https://${GIT_USERNAME}:${GIT_PASSWORD}@github.com/patelmurtuza/WebAppLTI' )
                }
            }
        }
    }
    post {
    // Clean after build
        always {
            cleanWs()
        }
    //Do this if the pipeline was aborted
        aborted{
            echo "The pipeline was aborted!!"
        }
    }
}
